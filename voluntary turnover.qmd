---
title: "Voluntary Turnover"
format: html
editor: visual
---

Run each month:

- update People Analytics - AT file
- check start and end date
- run script
- change pa_at filter to only DL/IDL
- change output name to include DL/IDL
- run script

To run for 2024 update:

- start and end date
  - start_date <- as.Date("2024-01-01")
  - end_date <- as.Date("2024-12-31")
- AT file to 2024

```{r}
#| label: setup
#| warning: false
library(tidyverse)

# read in helper functions
source("helper_functions.R")

# specify period: first date of current year and last day of previous month
start_date <- as.Date(floor_date(Sys.Date(), "year"))
end_date <- as.Date(floor_date(Sys.Date(), "month") - days(1))

# use for 2024 file
# start_date <- as.Date("2024-01-01")
# end_date <- as.Date("2024-12-31")

# get all months included in period
months_included <- seq(start_date, end_date, by = "month")

# get the last date of each month
last_day_of_month <- ceiling_date(months_included, "month") - days(1)

# data frame with all months
monthly_data <- tibble(last_day_of_month = as.Date(last_day_of_month))

# get active and terminated, add career_level bucket
active_and_terminated <- readxl::read_xlsx("inputs/People Analytics - AT.xlsx", skip = 4) |> 
  janitor::clean_names() |> 
  add_buckets()
```

```{r}
#| label: manu_vs_prof

# running professional+
output_name <- paste0("outputs/Professional Voluntary Turnover Rate Monthly ", start_date, " to ", end_date, ".xlsx")

pa_at <- active_and_terminated |> 
  apply_general_filters() |> 
  filter(career_level_bucket != "DL_IDL")

# running manufacturing 
# name the output excel file for manufacturing
# output_name <- paste0("outputs/Manufacturing Voluntary Turnover Rate Monthly ", start_date, " to ", end_date, ".xlsx")

# pa_at <- active_and_terminated |> 
#   apply_general_filters() |>
#   filter(career_level_bucket == "DL_IDL")
```

```{r}
# get results for all grouping variable combinations
monthly_turnover_data <- map(grouping_vars, ~ calculate_voluntary_turnover_monthly(pa_at, .x)) |> 
  set_names(output_sheet_names)
```

```{r}
# get a df with all active in each month
monthly_headcount <- map_df(last_day_of_month, function(date) {

  headcount <- pa_at |> 
    filter(hire_date <= date & (is.na(termination_date) | termination_date >= date)) |> 
    mutate(date = month(date, label = TRUE)) |> 
    select(employee_id, worker, hire_date, employee_type,
    termination_date, termination_category, termination_reason, 
    segment_function, division_function, business_unit_sub_function,
    location, career_level, date, 
    management_chain_level_2, management_chain_level_3, management_chain_level_4, management_chain_level_5)

  return(headcount)
  
})

# separates one df into one for each month
monthly_headcount_named <- monthly_headcount |> 
  nest_by(date) |> 
  mutate(data = set_names(list(data), date))

# adds a df for each monthly headcount
for (i in unique(monthly_headcount_named$date)) {
  monthly_turnover_data[[i]] <- monthly_headcount_named$data[[which(monthly_headcount_named$date == i)]]
}

# get vol terms sheet
monthly_turnover_data[["Voluntary Terms"]] <- pa_at |> 
  filter(termination_category == "Terminate Employee > Voluntary" &
        termination_date >= floor_date(start_date, "month") &
        termination_date <= end_date) |> 
  select(employee_id, worker, hire_date, employee_type,
        termination_date, termination_category, termination_reason, regrettable_termination,
        segment_function, division_function, business_unit_sub_function,
        location, career_level, management_chain_level_2, management_chain_level_3, management_chain_level_4, management_chain_level_5) |> 
  mutate_at(vars(contains("date")), as.Date)
```

```{r}
# create output
library(openxlsx)

wb <- createWorkbook()

for (sheet_name in names(monthly_turnover_data)) {
  addWorksheet(wb, sheet_name)
  writeDataTable(wb, sheet = sheet_name, x = monthly_turnover_data[[sheet_name]], tableStyle = "TableStyleMedium2")

  # get column index for voluntary turnover and ytd_annualized
  voluntary_turnover_col <- which(names(monthly_turnover_data[[sheet_name]]) == "voluntary_turnover")
  ytd_annualized_col <- which(names(monthly_turnover_data[[sheet_name]]) == "ytd_annualized")

  # format vt and annualized as a percent
  addStyle(wb, sheet = sheet_name, style = createStyle(numFmt = "0.0%"), cols = voluntary_turnover_col, 
          rows = 2:(nrow(monthly_turnover_data[[sheet_name]]) + 1), gridExpand = TRUE)
  addStyle(wb, sheet = sheet_name, style = createStyle(numFmt = "0.0%"), cols = ytd_annualized_col, 
          rows = 2:(nrow(monthly_turnover_data[[sheet_name]]) + 1), gridExpand = TRUE)
}

saveWorkbook(wb, output_name, overwrite = TRUE)
```

FAQ:

-   Associates are included in headcount if their termination day is on or after the last day of the month (e.g., an Associate will be included in January's headcount if their termination date is 1/31 or later).


### Future Ideas

- Create a function to make an active file and term file for each month from the AT file

- Possible to embed in body of email to flag for HRBP VPs?
