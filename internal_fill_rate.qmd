---
title: "Internal Fill Rate"
format: html
---

### Load data sources

-   People Analytics - Active and Terminated Report (PA - AT Report)

-   RRX\_-\_Worker_Data\_-\_Hires_and_Job_Changes Report (Worker Changes Report)

    
### Definitions

- Period:

    -   Start date: First date of current year

    -   End date: Last date of previous month
    
- Internal vs. External:

    -   External: hire date is the same as job profile start date

    -   Internal: job profile start date is after hire rate

### Filter

-   Period: Job profile start date is within the period of interest

-   Supervisor+: remove career levels starting with "AT", "P", and blanks

-   Employee only: contingent workers are removed

-   No HR: job family group Human Resources is removed

### Add additional context from worker changes report

-   Remove duplicate rows for promotions (remove business process type promote employee outbound)

-   Pulls in when job profile start date and effective date on worker changes report are the same

```{r}
#| label: set_up

library(tidyverse)

# read in helper functions
source("helper_functions.R")

# specify period: first date of current year and last day of previous month
start_date <- as.Date(floor_date(Sys.Date(), "year"))
end_date <- as.Date(floor_date(Sys.Date(), "month") - days(1))

# file path for active and terminated
file_path_pa_at <- "inputs/People Analytics - AT.xlsx"

# file path to most recent changes report
file_path_worker_changes <- "inputs/RRX_-_Worker_Data_-_Hires_and_Job_Changes.xlsx"

# for 2024
# start_date <- as.Date("2024-01-01")
# end_date <- as.Date("2024-12-31")

# file path for 2024
# file_path_pa_at <- "inputs/People Analytics - AT 2024.xlsx"

# file path for 2024
# file_path_worker_changes <- "inputs/RRX_-_Worker_Data_-_Hires_and_Job_Changes_2024.xlsx"
```

```{r}
# check if the number of grouping variables matches the number of sheet names
if (length(grouping_vars) != length(output_sheet_names)) {
  stop("The number of grouping variables and sheet names must be the same.")
}
```



```{r}
#| label: pa_at

# add career_level and internal/external flag
df_pa_at <- readxl::read_xlsx(file_path_pa_at, skip = 4) |> 
  janitor::clean_names() |>
  mutate(time_in_job_profile_start_date = as.Date(time_in_job_profile_start_date)) |> 
  add_buckets() |>
  # replacing the placeholder division that can't be updated for termed employees
  mutate(division_function = str_replace(division_function, 
                                        "AMC Thomson Linear Motion - General (Move to AMC Linear Motion Division)", 
                                        "AMC Linear Motion Division")) |> 
  mutate(internal_external = case_when(
    hire_date == time_in_job_profile_start_date ~ "External",
    hire_date < time_in_job_profile_start_date ~ "Internal",
    TRUE ~ "Error"))

# add test if there is an unmapped level
if (nrow(df_pa_at |> filter(career_level_bucket == "ERROR_unmapped_level"))  > 0) {
  stop("There are unmapped career levels")
}

# filter data to current period
# add project filters to get target population
pa_at <- df_pa_at |> 
    filter(time_in_job_profile_start_date >= start_date &
           time_in_job_profile_start_date <= end_date)
```

```{r}
#| label: worker_changes

# read in worker changes
df_worker_changes_raw <- readxl::read_xlsx(file_path_worker_changes, skip = 7) |> 
  janitor::clean_names() 

# if an employee has more than one business process reason on an effective date, remove transfer to another manager
df_worker_changes <- df_worker_changes_raw |> 
  group_by(employee_id, effective_date) |> 
  filter(!(n() > 1 & business_process_reason == "Transfer > Transfer > Move to another Manager")) |> 
  ungroup() |> 
  select(employee_id, effective_date, date_initiated, business_process_type, business_process_reason, 
         starts_with("prior_"), starts_with("new_")) 

# remove duplicate row for promotions - both inbound and outbound on report
worker_changes <- df_worker_changes |>
  filter(business_process_type != "Promote Employee Outbound") 
```



```{r}
#| label: join_data

# join data together matching on employee id and effective date/job profile start date
# apply filters to get target population
full_df <- pa_at |> 
  left_join(worker_changes, by = c("employee_id", 
                                         "time_in_job_profile_start_date" = "effective_date"), keep = TRUE) |> 
  apply_general_filters() |> 
  filter(!str_detect(career_level, "AT") & !str_detect(career_level, "P") & 
            !is.na(career_level)) |> 
  rename(employee_id = employee_id.x) |> 
  select(-employee_id.y) 

# validation: check if many-to-many caused from multiple moves
qa_multiple_moves <- full_df %>%
  group_by(employee_id) %>%
  filter(n() > 1) %>%
  ungroup()

# check if the number of grouping variables matches the number of sheet names
if (nrow(qa_multiple_moves) > 0) {
  stop("At least one person has multiple moves on same effective date.")
}
```


```{r}
#| label: data_to_share

# all data to be shared with results
full_df_scrubbed <- full_df |> 
  select(employee_id, worker, hire_date, time_in_job_profile_start_date, internal_external, employee_type,
         segment_function, division_function, business_unit_sub_function, location, location_address_country, career_level, 
         management_chain_level_2, management_chain_level_3, management_chain_level_4, management_chain_level_5,
         effective_date, date_initiated, business_process_type, business_process_reason, 
         prior_job_profile, prior_career_level, prior_comp_grade, 
         new_job_profile, new_job_family, new_career_level, new_comp_grade) |> 
  mutate_at(vars(contains("date")), as.Date) |> 
  arrange(time_in_job_profile_start_date)
```


```{r}
# run IFR function for each grouping variable
monthly_results <- map(grouping_vars, ~calculate_internal_fill_monthly(full_df, .x))

# name each grouping var output to its sheet name
monthly_results_named <- set_names(monthly_results, output_sheet_names)

# add the scrubbed data details
monthly_results_named[["Data Details"]] <- full_df_scrubbed

# name the output excel file
output_name <- paste0("outputs/Internal Fill Rate Monthly ", start_date, " to ", end_date, ".xlsx")
```

```{r}
# use openxlsx to format output as tables within excel
library(openxlsx)

wb <- createWorkbook()

for (sheet_name in names(monthly_results_named)) {
  addWorksheet(wb, sheet_name)
  writeDataTable(wb, sheet = sheet_name, x = monthly_results_named[[sheet_name]], tableStyle = "TableStyleMedium2")
  
  # Get the column index for "Internal Fill Rate"
  internal_fill_rate_col <- which(names(monthly_results_named[[sheet_name]]) == "Internal Fill Rate")
  
  # Apply percentage format to the "Internal Fill Rate" column
  if (length(internal_fill_rate_col) > 0) {
    addStyle(wb, sheet = sheet_name, 
             style = createStyle(numFmt = "0%"), 
             cols = internal_fill_rate_col, 
             rows = 2:(nrow(monthly_results_named[[sheet_name]]) + 1), 
             gridExpand = TRUE)
  }
}

saveWorkbook(wb, output_name, overwrite = TRUE)
```

### Validation Checks

```{r}
# promo, lateral move, promo, no new job profile
# excluding terminations and outbound to remove duplicates 
qa_change_dates_same <- df_worker_changes_raw |> 
  filter(business_process_reason %in% c("Demotion > Demotion > Decrease in Responsibility", 
                                      "Promotion > Promotion > Promotion", 
                                      "Lateral Move > Lateral Move > Move to another position on my team")) |> 
  filter(business_process_type != "Promote Employee Inbound") |> 
  filter(!str_detect(new_career_level, "AT") & !str_detect(new_career_level, "P") & 
           !is.na(new_career_level)) |> 
  filter(!str_detect(business_process_reason, "Terminate")) |> 
  anti_join(pa_at, by = "employee_id") |> 
  select(employee_id, worker, 
         segment_function, division_function,
         effective_date, date_initiated, business_process_type, business_process_reason, 
         prior_job_profile, prior_career_level, prior_comp_grade, 
         new_job_profile, new_career_level, new_comp_grade)

qa_change_dates_same |> 
  group_by(business_process_reason) |> 
  summarize(count = n())
```


```{r}
# create data validation file
writexl::write_xlsx(
  list(
    "New Profile No ProLatDemo" = full_df_scrubbed |> 
         filter(!business_process_reason %in% c("Demotion > Demotion > Decrease in Responsibility", 
                                      "Promotion > Promotion > Promotion", 
                                      "Lateral Move > Lateral Move > Move to another position on my team") | is.na(business_process_reason)) |> 
        filter(business_process_type != "Hire" | is.na(business_process_type)),
    "ProLatDemo No Profile Change" = qa_change_dates_same |> 
         filter(!str_detect(business_process_reason, "Hire Employee")) |> 
          filter(business_process_type != "Promote Employee Inbound") |> 
          arrange(desc(effective_date))
    ), 
  "outputs/Internal Fill Data Validation.xlsx"
)
```

