---
title: "Untitled"
format: html
---


```{r}
library(tidyverse)
library(openxlsx)

# read in helper functions
source("helper_functions.R")

# filepaths
ifr_current_path <- "outputs/Internal Fill Rate Monthly 2025-01-01 to 2025-04-30.xlsx"
ifr_prev_path <- "outputs/Internal Fill Rate Monthly 2024-01-01 to 2024-12-31.xlsx"

vt_current_path <- "outputs/Professional Voluntary Turnover Rate Monthly 2025-01-01 to 2025-04-30.xlsx"
vt_prev_path <- "outputs/Professional Voluntary Turnover Rate Monthly 2024-01-01 to 2024-12-31.xlsx"

mf_vt_current_path <- "outputs/Manufacturing Voluntary Turnover Rate Monthly 2025-01-01 to 2025-04-30.xlsx"
mf_vt_prev_path <- "outputs/Manufacturing Voluntary Turnover Rate Monthly 2024-01-01 to 2024-12-31.xlsx"

# read in current and previous year
ifr_current <- read_excel_allsheets(filename = ifr_current_path)
ifr_prev <- read_excel_allsheets(filename = ifr_prev_path)

vt_current <- read_excel_allsheets(filename = vt_current_path)
vt_prev <- read_excel_allsheets(filename = vt_prev_path)

mf_vt_current <- read_excel_allsheets(filename = mf_vt_current_path)
mf_vt_prev <- read_excel_allsheets(filename = mf_vt_prev_path)
```

```{r}
# column order used by finance
# use for previous year
column_order <- c("Jan", "Feb", "Mar", "Q1", "Apr", "May", "Jun", "Q2", "Jul", "Aug", "Sep", "Q3", "Oct", "Nov", "Dec", "Q4") 

# get the current month
current_month <- month(end_date + 1, label = TRUE, abbr = TRUE)

# get the index of the current month, and take one before (so quarters are included)
current_month_index <- which(column_order == current_month) - 1

# filter column order to only include current months
# use for current year
column_order_dynamic <- column_order[1:current_month_index]

# get the remaining months for forecasting
remaining_months <- setdiff(column_order, column_order_dynamic)

remaining_months_tibble <- tibble(remaining_months,
                                  value = NA) |> 
  pivot_wider(names_from = remaining_months, values_from = value)
```

# IFR and VT Functions

```{r}
internal_fill_bur <- function(previous_output = ifr_prev, current_output = ifr_current, attribute = 'Segment') {

    prev <- previous_output[[attribute]] |> 
        mutate(data_source = "PY Actual") |> 
        select(-`Roles Filled Internally`, -`Total Filled Roles`) |> 
        pivot_wider(names_from = month, values_from = `Internal Fill Rate`) |> 
        select(where(is.character), "ytd", all_of(column_order))

    # get goals
    goal <- previous_output[[attribute]] |> 
        select(where(is.character)) |> 
        mutate(data_source = "AOP") |> 
        mutate(Goal = 0.50) |> 
        pivot_wider(names_from = month, values_from = Goal) |> 
        replace_na(list(Goal = 0.50)) |> 
        select(where(is.character), "ytd", all_of(column_order))

    # get current data
    current <- current_output[[attribute]]  |>
        mutate(data_source = "CY Actual") |> 
        select(-`Roles Filled Internally`, -`Total Filled Roles`) |> 
        pivot_wider(names_from = month, values_from = `Internal Fill Rate`) |> 
        select(where(is.character), "ytd", all_of(column_order_dynamic))

    # get forecast based on current data for remaining months
    forecast <- current |> 
        select(1:ytd) |> 
        bind_cols(remaining_months_tibble) |> 
        mutate(across(everything(), ~ ifelse(is.na(.), ytd, .)))

    # combining current year and forecast for remaining months
    commit_forecast <- current |> 
        left_join(forecast) |> 
        mutate(data_source = "Commit/Forecast")

    # get just ytd performance for the YTD metric first on the finance template
    ytd_perf <- current |> 
        select(1:ytd) |> 
        rename(ytd_value = ytd) |> 
        select(-data_source)

    # combine all together
    combined <- prev |> 
        bind_rows(goal) |> 
        bind_rows(commit_forecast) |> 
        left_join(ytd_perf) |> 
        mutate(segment_function = case_when(segment_function == "Corporate" ~ "Corporate",
                                            TRUE ~ str_extract(segment_function, pattern = "\\(([^)]+)\\)"))) |> 
        mutate(segment_function = str_remove_all(segment_function, "[()]")) |> 
        mutate(cvd = "Internal Fill Rate") |> 
        relocate(cvd, .before = data_source)

    reformat <- combined |> 
        rename(FY = ytd) |>  
        relocate(FY, .after = last_col()) |> 
        relocate(ytd_value, .before = data_source)

    return(reformat)
}

```

```{r}
voluntary_turnover_bur <- function(previous_output = vt_prev, current_output = vt_current, attribute = 'Segment') {
      
      prev <- previous_output[[attribute]] |> 
        mutate(data_source = "PY Actual") |> 
        select(-headcount, -voluntary_terminations, -ytd_annualized) |> 
        pivot_wider(names_from = month, values_from = voluntary_turnover) |> 
        select(where(is.character), "ytd", all_of(column_order))

      goal <- previous_output[[attribute]] |> 
        select(where(is.character), voluntary_turnover) |> 
        # filter(month != "ytd") |> 
        mutate(data_source = "AOP") |> 
        mutate(Goal = voluntary_turnover*0.90) |> 
        select(-voluntary_turnover) |> 
        pivot_wider(names_from = month, values_from = Goal) |> 
        select(where(is.character), "ytd", all_of(column_order))

      current <- current_output[[attribute]]  |>
        mutate(data_source = "CY Actual") |> 
        select(-headcount, -voluntary_terminations, -ytd_annualized) |> 
        pivot_wider(names_from = month, values_from = voluntary_turnover) |> 
        select(where(is.character), "ytd", all_of(column_order_dynamic))

    ytd_annualized <- current_output[[attribute]] |> 
        select(-headcount, -voluntary_terminations, -month, -voluntary_turnover) |> 
        filter(!is.na(ytd_annualized))
    
    # get the remaining months and use forecast for months, forecast * 3 for cols starting with Q
    forecast <- ytd_annualized |> 
        mutate(forecast = ytd_annualized / 12) |> 
        bind_cols(remaining_months_tibble) |> 
        mutate(across(everything(), ~ ifelse(is.na(.), 
                                        case_when(str_detect(cur_column(), "Q") ~ forecast * 3, 
                                        TRUE ~ forecast), .))) |> 
        select(-ytd_annualized, -forecast)

    commit_forecast <- current |> 
        left_join(forecast) |> 
        mutate(data_source = "Commit/Forecast")

      combined <- prev |> 
        bind_rows(goal) |> 
        bind_rows(commit_forecast) |> 
        left_join(ytd_annualized) |> 
        mutate(segment_function = case_when(
              segment_function == "Corporate" ~ "Corporate",
              TRUE ~ str_extract(segment_function, pattern = "\\(([^)]+)\\)"))) |> 
        mutate(segment_function = str_remove_all(segment_function, "[()]")) |> 
        mutate(cvd = case_when(
                    identical(current_output, vt_current) ~ "Professional Voluntary Turnover",
                    identical(current_output, mf_vt_current) ~ "Manufacturing Voluntary Turnover",
                    TRUE ~ "Voluntary Turnover")) |> 
        relocate(cvd, .before = data_source)


    reformat <- combined |> 
        rename(FY = ytd,
                ytd_value = ytd_annualized) |> 
        relocate(ytd_value, .before = data_source) |> 
        relocate(FY, .after = last_col()) |> 
        mutate(FY = case_when(data_source == "Commit/Forecast" ~ ytd_value,
                                TRUE ~ FY))
  
  return(reformat)
}
```

# Create Dataframes

```{r}
# create the full files by each attribute
ifr_segment <- internal_fill_bur(attribute = "Segment")

ifr_division <- internal_fill_bur(attribute = "Segment by Division")

ifr_plant <- internal_fill_bur(attribute = "Division by Location")
```

```{r}
# create the full files by each attribute
vt_segment <- voluntary_turnover_bur(attribute = "Segment")

vt_division <- voluntary_turnover_bur(attribute = "Segment by Division")

vt_plant <- voluntary_turnover_bur(attribute = "Division by Location")
```

```{r}
# create the full files for manufacturing
# mf_vt_segment <- voluntary_turnover_bur(previous_output = mf_vt_prev, current_output = mf_vt_current, 
#                                         attribute = "Segment")

# mf_vt_division <- voluntary_turnover_bur(previous_output = mf_vt_prev, current_output = mf_vt_current, 
#                                         attribute = "Segment by Division")

mf_vt_plant <- voluntary_turnover_bur(previous_output = mf_vt_prev, current_output = mf_vt_current, 
                                        attribute = "Division by Location")
```

# Combine VT and IFR

```{r}
# combine ifr and vt together
segment <- vt_segment |> 
    bind_rows(ifr_segment)

division <- vt_division |> 
    bind_rows(ifr_division)

plant <- vt_plant |> 
    bind_rows(ifr_plant) |> 
    bind_rows(mf_vt_plant)
```

```{r}
segment_split <- split(segment, segment$segment_function)

division_split <- split(division, division$segment_function)

plant_split <- split(plant, plant$division_function)
```

```{r}
# combine segment and division splits
bur_combined_segments <- lapply(names(division_split), function(segment_function) {
    combined_df <- bind_rows(division_split[[segment_function]], 
                            segment_split[[segment_function]])
    return(combined_df)
})

names(bur_combined_segments) <- names(division_split)
```


# Create Output

```{r}
# create excel files for POR and BURs

lapply(names(bur_combined_segments), function(segment_function) {
    wb <- createWorkbook()

    # get the combined file for each segment, if division is blank replace with segment
    combined_df <- bur_combined_segments[[segment_function]] |> 

        mutate(division_function = coalesce(division_function, paste0("L1_", segment_function)))
    
    # get each unique division for sheet creation
    unique_divisions <- unique(combined_df$division_function)

    lapply(unique_divisions, function(division_function) {

        # truncate names to less than 31 characters and remove special characters
        short_division_name <- case_when(nchar(division_function) > 30 ~ substr(division_function, 1, 30), 
                                        TRUE ~ division_function) |>
                                str_remove("[/]")
        
        # create each sheet
        addWorksheet(wb, short_division_name)

        # add filtered data for each division to each sheet
        division_data <- combined_df |> 
            filter(division_function == !!division_function)
            writeData(wb, short_division_name, division_data)

        
        # Apply percentage formatting to all numeric columns
        numeric_cols <- which(sapply(division_data, is.numeric))
        addStyle(wb, short_division_name, cols = numeric_cols, rows = 2:(nrow(division_data) + 1), style = createStyle(numFmt = "0.0%"), gridExpand = TRUE)

    })

    saveWorkbook(wb, paste0("outputs/BURs/BUR Testing_",segment_function,".xlsx"), overwrite = TRUE)
})
```

```{r}
# create files for SORs
lapply(names(plant_split), function(division_function) {
    wb <- createWorkbook()

    # get the combined file for each segment, if division is blank replace with segment
    combined_df <- plant_split[[division_function]] 

        # mutate(division_function = coalesce(division_function, paste0("L1_", segment_function)))
    
    # get each unique division for sheet creation
    unique_plants <- unique(combined_df$location)

    lapply(unique_plants, function(location) {

        # truncate names to less than 31 characters and remove special characters
        short_plant_name <- case_when(nchar(location) > 30 ~ substr(location, 1, 30), 
                                        TRUE ~ location) |>
                                str_remove("[/]")
        
        # create each sheet
        addWorksheet(wb, short_plant_name)

        # add filtered data for each division to each sheet
        plant_data <- combined_df |> 
            filter(location == !!location)
            writeData(wb, short_plant_name, plant_data)

        
        # Apply percentage formatting to all numeric columns
        numeric_cols <- which(sapply(plant_data, is.numeric))
        addStyle(wb, short_plant_name, cols = numeric_cols, rows = 2:(nrow(plant_data) + 1), style = createStyle(numFmt = "0.0%"), gridExpand = TRUE)

    })

    saveWorkbook(wb, paste0("outputs/SORs/SOR Testing_",division_function, ".xlsx"), 
                overwrite = TRUE)
})
```

