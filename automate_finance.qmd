---
title: "Untitled"
format: html
---


```{r}
library(tidyverse)
library(openxlsx)

# read in helper functions
source("helper_functions.R")

# filepaths
ifr_current_path <- "outputs/Internal Fill Rate Monthly 2025-01-01 to 2025-03-31.xlsx"
ifr_prev_path <- "outputs/Internal Fill Rate Monthly 2024-01-01 to 2024-12-31.xlsx"

vt_current_path <- "outputs/Professional Voluntary Turnover Rate Monthly 2025-01-01 to 2025-03-31.xlsx"
vt_prev_path <- "outputs/Professional Voluntary Turnover Rate Monthly 2024-01-01 to 2024-12-31.xlsx"

# read in current and previous year
ifr_current <- read_excel_allsheets(filename = ifr_current_path)
ifr_prev <- read_excel_allsheets(filename = ifr_prev_path)

vt_current <- read_excel_allsheets(filename = vt_current_path)
vt_prev <- read_excel_allsheets(filename = vt_prev_path)
```

```{r}
# column order used by finance
# use for previous year
column_order <- c("Jan", "Feb", "Mar", "Q1", "Apr", "May", "Jun", "Q2", "Jul", "Aug", "Sep", "Q3", "Oct", "Nov", "Dec", "Q4") 

# get the current month
current_month <- month(end_date + 1, label = TRUE, abbr = TRUE)

# get the index of the current month, and take one before (so quarters are included)
current_month_index <- which(column_order == current_month) - 1

# filter column order to only include current months
# use for current year
column_order_dynamic <- column_order[1:current_month_index]
```

```{r}
internal_fill_bur <- function(previous_output = ifr_prev, current_output = ifr_current, attribute = 'Segment', metric = "IFR") {
    prev <- previous_output[[attribute]] |> 
        mutate(data_source = "PY Actual") |> 
        select(-`Roles Filled Internally`, -`Total Filled Roles`) |> 
        pivot_wider(names_from = month, values_from = `Internal Fill Rate`) |> 
        select(where(is.character), "ytd", all_of(column_order))

    # get goals
    goal <- previous_output[[attribute]] |> 
        select(where(is.character)) |> 
        mutate(data_source = "Goal") |> 
        mutate(Goal = 0.50) |> 
        pivot_wider(names_from = month, values_from = Goal) |> 
        replace_na(list(Goal = 0.50)) |> 
        select(where(is.character), "ytd", all_of(column_order))

    # get current data
    current <- current_output[[attribute]]  |>
        mutate(data_source = "CY Actual") |> 
        select(-`Roles Filled Internally`, -`Total Filled Roles`) |> 
        pivot_wider(names_from = month, values_from = `Internal Fill Rate`) |> 
        select(where(is.character), "ytd", all_of(column_order_dynamic))

    # combine all together
    combined <- prev |> 
        bind_rows(goal) |> 
        bind_rows(current) |> 
        mutate(segment_function = case_when(segment_function == "Corporate" ~ "Corporate",
                                            TRUE ~ str_extract(segment_function, pattern = "\\(([^)]+)\\)"))) |> 
        mutate(segment_function = str_remove_all(segment_function, "[()]"))

    return(combined)
}

```

```{r}
bur_segment <- internal_fill_bur(attribute = "Segment")

bur_division <- internal_fill_bur(attribute = "Segment by Division")

bur_plant <- internal_fill_bur(attribute = "Division by Location")
```

```{r}
# split by segment
bur_segment_split <- split(bur_segment, bur_segment$segment_function)

bur_division_split <- split(bur_division, bur_division$segment_function)

bur_plant_split <- split(bur_plant, bur_plant$segment_function)
```

```{r}
# combine segment and division splits
bur_combined_segments <- lapply(names(bur_division_split), function(segment_function) {
    combined_df <- bind_rows(bur_division_split[[segment_function]], 
                                bur_segment_split[[segment_function]])
    return(combined_df)
})

names(bur_combined_segments) <- names(bur_division_split)
```

```{r}
# create excel files

lapply(names(bur_combined_segments), function(segment_function) {
    wb <- createWorkbook()

    # get the combined file for each segment, if division is blank replace with segment
    combined_df <- bur_combined_segments[[segment_function]] |> 

        mutate(division_function = coalesce(division_function, paste0("L1_", segment_function)))
    
    # get each unique division for sheet creation
    unique_divisions <- unique(combined_df$division_function)

    lapply(unique_divisions, function(division_function) {

        # truncate names to less than 31 characters and remove special characters
        short_division_name <- case_when(nchar(division_function) > 30 ~ substr(division_function, 1, 30), 
                                        TRUE ~ division_function) |>
                                str_remove("[/]")
        
        # create each sheet
        addWorksheet(wb, short_division_name)

        # add filtered data for each division to each sheet
        division_data <- combined_df |> 
            filter(division_function == !!division_function)
            writeData(wb, short_division_name, division_data)
    })

    saveWorkbook(wb, paste0("tmp_",segment_function,".xlsx"), overwrite = TRUE)
})
```

```{r}
# get goal that is 10% improvement from previous year
############ WILL ONLY NEED FOR VT, NOT IFR ##########################
seg_goal <- seg_prev |> 
    select(where(is.character), ytd) |> 
    mutate(goal = ytd * 0.90)

# get goal for each month and quarter
goal_values <- c(rep(seg_goal / 12, 3), seg_goal / 4, 
                rep(seg_goal / 12, 3), seg_goal / 4,
                rep(seg_goal / 12, 3), seg_goal / 4,
                rep(seg_goal / 12, 3), seg_goal / 4)
```