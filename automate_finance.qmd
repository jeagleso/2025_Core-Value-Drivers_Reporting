---
title: "Untitled"
format: html
---


```{r}
library(tidyverse)

# read in helper functions
source("helper_functions.R")

# filepaths
ifr_current_path <- "outputs/Internal Fill Rate Monthly 2025-01-01 to 2025-03-31.xlsx"
ifr_prev_path <- "outputs/Internal Fill Rate Monthly 2024-01-01 to 2024-12-31.xlsx"

vt_current_path <- "outputs/Professional Voluntary Turnover Rate Monthly 2025-01-01 to 2025-03-31.xlsx"
vt_prev_path <- "outputs/Professional Voluntary Turnover Rate Monthly 2024-01-01 to 2024-12-31.xlsx"

# read in current and previous year
ifr_current <- read_excel_allsheets(filename = ifr_current_path)
ifr_prev <- read_excel_allsheets(filename = ifr_prev_path)

vt_current <- read_excel_allsheets(filename = vt_current_path)
vt_prev <- read_excel_allsheets(filename = vt_prev_path)
```

```{r}
# column order used by finance
# use for previous year
column_order <- c("Jan", "Feb", "Mar", "Q1", "Apr", "May", "Jun", "Q2", "Jul", "Aug", "Sep", "Q3", "Oct", "Nov", "Dec", "Q4") 

# get the current month
current_month <- month(end_date + 1, label = TRUE, abbr = TRUE)

# get the index of the current month, and take one before (so quarters are included)
current_month_index <- which(column_order == current_month) - 1

# filter column order to only include current months
# use for current year
column_order_dynamic <- column_order[1:current_month_index]
```

```{r}
internal_fill_bur <- function(previous_output = ifr_prev, current_output = ifr_current, attribute = 'Segment', metric = "IFR") {
    prev <- previous_output[[attribute]] |> 
        mutate(data_source = "PY Actual") |> 
        select(-`Roles Filled Internally`, -`Total Filled Roles`) |> 
        pivot_wider(names_from = month, values_from = `Internal Fill Rate`) |> 
        select(where(is.character), "ytd", all_of(column_order))

    # get goals
    goal <- previous_output[[attribute]] |> 
        select(c(1:3)) |> 
        mutate(data_source = "Goal") |> 
        mutate(Goal = 0.50) |> 
        pivot_wider(names_from = month, values_from = Goal) |> 
        replace_na(list(Goal = 0.50)) |> 
        select(where(is.character), "ytd", all_of(column_order))

    # get current data
    current <- current_output[[attribute]]  |>
        mutate(data_source = "CY Actual") |> 
        select(-`Roles Filled Internally`, -`Total Filled Roles`) |> 
        pivot_wider(names_from = month, values_from = `Internal Fill Rate`) |> 
        select(where(is.character), "ytd", all_of(column_order_dynamic))

    # combine all together
    combined <- prev |> 
        bind_rows(goal) |> 
        bind_rows(current)

    return(combined)
}

```

```{r}
calculate_internal_fill_monthly <- function(df = full_df, grouping_var) {

  # calculate internal fill by month
  df_month <- df |> 
    mutate(month = as.Date(floor_date(time_in_job_profile_start_date, "month"))) |> 
    group_by(across(all_of(grouping_var)), month, internal_external) |> 
    summarize(count = n_distinct(employee_id, effective_date), .groups = "drop_last") |> 
    ungroup() |> 
    complete(nesting(!!!syms(grouping_var)), month, 
            internal_external = c("Internal", "External"), 
             fill = list(count = 0)) |>  
    mutate(total = sum(count),
           fill_rate = round(count / total, 4)) |> 
    ungroup() |> 
    filter(internal_external == "Internal") |> 
    arrange(month) |> 
    select(-internal_external) |> 
    mutate(month = month(month, label = TRUE))
  
  return(df_month)
}

```

```{r}
grouping_vars <- list(NULL, 
                      "segment_function", 
                      c("segment_function", "division_function"), 
                      c("segment_function", "division_function", "business_unit_sub_function"),
                      c("segment_function", "division_function", "location"),
                      c("segment_function", "career_level_bucket"),
                      "career_level_bucket")


tmp <- full_df |> 
    mutate(month = as.Date(floor_date(time_in_job_profile_start_date, "month"))) |> 
    group_by(division_function, month, internal_external) |>  
    summarize(count = n_distinct(employee_id, effective_date), .groups = "drop_last") |> 
    ungroup() |> 
    complete(division_function, month, 
            internal_external = c("Internal", "External"), 
             fill = list(count = 0))
```

```{r}
monthly_results <- map(grouping_vars, ~calculate_internal_fill_monthly(full_df, .x))
```

```{r}
tmp_check <- monthly_results[[3]] |> 
    group_by(division_function) |> 
    summarize(n = n())

tmp |> 
    group_by(division_function) |> 
    summarize(n = n())
```

```{r}
tmp <- internal_fill_bur(attribute = "Segment by Division")
```

```{r}
# get goal that is 10% improvement from previous year
############ WILL ONLY NEED FOR VT, NOT IFR ##########################
seg_goal <- seg_prev |> 
    select(where(is.character), ytd) |> 
    mutate(goal = ytd * 0.90)

# get goal for each month and quarter
goal_values <- c(rep(seg_goal / 12, 3), seg_goal / 4, 
                rep(seg_goal / 12, 3), seg_goal / 4,
                rep(seg_goal / 12, 3), seg_goal / 4,
                rep(seg_goal / 12, 3), seg_goal / 4)
```